// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccgraph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ccgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ccgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ccgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ccgraph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ccgraph_2eproto;
namespace CCGraphRPC {
class CallParam;
class CallParamDefaultTypeInternal;
extern CallParamDefaultTypeInternal _CallParam_default_instance_;
class CommandParam;
class CommandParamDefaultTypeInternal;
extern CommandParamDefaultTypeInternal _CommandParam_default_instance_;
class Results;
class ResultsDefaultTypeInternal;
extern ResultsDefaultTypeInternal _Results_default_instance_;
class RetRow;
class RetRowDefaultTypeInternal;
extern RetRowDefaultTypeInternal _RetRow_default_instance_;
class StartParam;
class StartParamDefaultTypeInternal;
extern StartParamDefaultTypeInternal _StartParam_default_instance_;
}  // namespace CCGraphRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::CCGraphRPC::CallParam* Arena::CreateMaybeMessage<::CCGraphRPC::CallParam>(Arena*);
template<> ::CCGraphRPC::CommandParam* Arena::CreateMaybeMessage<::CCGraphRPC::CommandParam>(Arena*);
template<> ::CCGraphRPC::Results* Arena::CreateMaybeMessage<::CCGraphRPC::Results>(Arena*);
template<> ::CCGraphRPC::RetRow* Arena::CreateMaybeMessage<::CCGraphRPC::RetRow>(Arena*);
template<> ::CCGraphRPC::StartParam* Arena::CreateMaybeMessage<::CCGraphRPC::StartParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CCGraphRPC {

enum Code : int {
  kOk = 0,
  kConflict = 1,
  kAbort = 2,
  kFatal = 3,
  Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Code_IsValid(int value);
constexpr Code Code_MIN = kOk;
constexpr Code Code_MAX = kFatal;
constexpr int Code_ARRAYSIZE = Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Code_descriptor();
template<typename T>
inline const std::string& Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Code_descriptor(), enum_t_value);
}
inline bool Code_Parse(
    const std::string& name, Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Code>(
    Code_descriptor(), name, value);
}
// ===================================================================

class StartParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCGraphRPC.StartParam) */ {
 public:
  inline StartParam() : StartParam(nullptr) {};
  virtual ~StartParam();

  StartParam(const StartParam& from);
  StartParam(StartParam&& from) noexcept
    : StartParam() {
    *this = ::std::move(from);
  }

  inline StartParam& operator=(const StartParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartParam& operator=(StartParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartParam* internal_default_instance() {
    return reinterpret_cast<const StartParam*>(
               &_StartParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartParam& a, StartParam& b) {
    a.Swap(&b);
  }
  inline void Swap(StartParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartParam* New() const final {
    return CreateMaybeMessage<StartParam>(nullptr);
  }

  StartParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartParam& from);
  void MergeFrom(const StartParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCGraphRPC.StartParam";
  }
  protected:
  explicit StartParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ccgraph_2eproto);
    return ::descriptor_table_ccgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCGraphRPC.StartParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccgraph_2eproto;
};
// -------------------------------------------------------------------

class CommandParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCGraphRPC.CommandParam) */ {
 public:
  inline CommandParam() : CommandParam(nullptr) {};
  virtual ~CommandParam();

  CommandParam(const CommandParam& from);
  CommandParam(CommandParam&& from) noexcept
    : CommandParam() {
    *this = ::std::move(from);
  }

  inline CommandParam& operator=(const CommandParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandParam& operator=(CommandParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandParam* internal_default_instance() {
    return reinterpret_cast<const CommandParam*>(
               &_CommandParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandParam& a, CommandParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandParam* New() const final {
    return CreateMaybeMessage<CommandParam>(nullptr);
  }

  CommandParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandParam& from);
  void MergeFrom(const CommandParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCGraphRPC.CommandParam";
  }
  protected:
  explicit CommandParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ccgraph_2eproto);
    return ::descriptor_table_ccgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // bytes command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command(
      std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:CCGraphRPC.CommandParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccgraph_2eproto;
};
// -------------------------------------------------------------------

class CallParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCGraphRPC.CallParam) */ {
 public:
  inline CallParam() : CallParam(nullptr) {};
  virtual ~CallParam();

  CallParam(const CallParam& from);
  CallParam(CallParam&& from) noexcept
    : CallParam() {
    *this = ::std::move(from);
  }

  inline CallParam& operator=(const CallParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallParam& operator=(CallParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallParam* internal_default_instance() {
    return reinterpret_cast<const CallParam*>(
               &_CallParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CallParam& a, CallParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CallParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallParam* New() const final {
    return CreateMaybeMessage<CallParam>(nullptr);
  }

  CallParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallParam& from);
  void MergeFrom(const CallParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCGraphRPC.CallParam";
  }
  protected:
  explicit CallParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ccgraph_2eproto);
    return ::descriptor_table_ccgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamListFieldNumber = 2,
    kTxnNameFieldNumber = 1,
    kRetryFieldNumber = 3,
  };
  // repeated bytes param_list = 2;
  int param_list_size() const;
  private:
  int _internal_param_list_size() const;
  public:
  void clear_param_list();
  const std::string& param_list(int index) const;
  std::string* mutable_param_list(int index);
  void set_param_list(int index, const std::string& value);
  void set_param_list(int index, std::string&& value);
  void set_param_list(int index, const char* value);
  void set_param_list(int index, const void* value, size_t size);
  std::string* add_param_list();
  void add_param_list(const std::string& value);
  void add_param_list(std::string&& value);
  void add_param_list(const char* value);
  void add_param_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& param_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_param_list();
  private:
  const std::string& _internal_param_list(int index) const;
  std::string* _internal_add_param_list();
  public:

  // bytes txn_name = 1;
  void clear_txn_name();
  const std::string& txn_name() const;
  void set_txn_name(const std::string& value);
  void set_txn_name(std::string&& value);
  void set_txn_name(const char* value);
  void set_txn_name(const void* value, size_t size);
  std::string* mutable_txn_name();
  std::string* release_txn_name();
  void set_allocated_txn_name(std::string* txn_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_txn_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_txn_name(
      std::string* txn_name);
  private:
  const std::string& _internal_txn_name() const;
  void _internal_set_txn_name(const std::string& value);
  std::string* _internal_mutable_txn_name();
  public:

  // bool retry = 3;
  void clear_retry();
  bool retry() const;
  void set_retry(bool value);
  private:
  bool _internal_retry() const;
  void _internal_set_retry(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCGraphRPC.CallParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> param_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txn_name_;
  bool retry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccgraph_2eproto;
};
// -------------------------------------------------------------------

class RetRow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCGraphRPC.RetRow) */ {
 public:
  inline RetRow() : RetRow(nullptr) {};
  virtual ~RetRow();

  RetRow(const RetRow& from);
  RetRow(RetRow&& from) noexcept
    : RetRow() {
    *this = ::std::move(from);
  }

  inline RetRow& operator=(const RetRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetRow& operator=(RetRow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetRow* internal_default_instance() {
    return reinterpret_cast<const RetRow*>(
               &_RetRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RetRow& a, RetRow& b) {
    a.Swap(&b);
  }
  inline void Swap(RetRow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetRow* New() const final {
    return CreateMaybeMessage<RetRow>(nullptr);
  }

  RetRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetRow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetRow& from);
  void MergeFrom(const RetRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetRow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCGraphRPC.RetRow";
  }
  protected:
  explicit RetRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ccgraph_2eproto);
    return ::descriptor_table_ccgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneRowFieldNumber = 1,
  };
  // repeated bytes one_row = 1;
  int one_row_size() const;
  private:
  int _internal_one_row_size() const;
  public:
  void clear_one_row();
  const std::string& one_row(int index) const;
  std::string* mutable_one_row(int index);
  void set_one_row(int index, const std::string& value);
  void set_one_row(int index, std::string&& value);
  void set_one_row(int index, const char* value);
  void set_one_row(int index, const void* value, size_t size);
  std::string* add_one_row();
  void add_one_row(const std::string& value);
  void add_one_row(std::string&& value);
  void add_one_row(const char* value);
  void add_one_row(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& one_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_one_row();
  private:
  const std::string& _internal_one_row(int index) const;
  std::string* _internal_add_one_row();
  public:

  // @@protoc_insertion_point(class_scope:CCGraphRPC.RetRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> one_row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccgraph_2eproto;
};
// -------------------------------------------------------------------

class Results PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCGraphRPC.Results) */ {
 public:
  inline Results() : Results(nullptr) {};
  virtual ~Results();

  Results(const Results& from);
  Results(Results&& from) noexcept
    : Results() {
    *this = ::std::move(from);
  }

  inline Results& operator=(const Results& from) {
    CopyFrom(from);
    return *this;
  }
  inline Results& operator=(Results&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Results& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Results* internal_default_instance() {
    return reinterpret_cast<const Results*>(
               &_Results_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Results& a, Results& b) {
    a.Swap(&b);
  }
  inline void Swap(Results* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Results* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Results* New() const final {
    return CreateMaybeMessage<Results>(nullptr);
  }

  Results* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Results>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Results& from);
  void MergeFrom(const Results& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Results* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCGraphRPC.Results";
  }
  protected:
  explicit Results(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ccgraph_2eproto);
    return ::descriptor_table_ccgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColNameFieldNumber = 2,
    kTableFieldNumber = 3,
    kMeasureFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // repeated bytes col_name = 2;
  int col_name_size() const;
  private:
  int _internal_col_name_size() const;
  public:
  void clear_col_name();
  const std::string& col_name(int index) const;
  std::string* mutable_col_name(int index);
  void set_col_name(int index, const std::string& value);
  void set_col_name(int index, std::string&& value);
  void set_col_name(int index, const char* value);
  void set_col_name(int index, const void* value, size_t size);
  std::string* add_col_name();
  void add_col_name(const std::string& value);
  void add_col_name(std::string&& value);
  void add_col_name(const char* value);
  void add_col_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& col_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_col_name();
  private:
  const std::string& _internal_col_name(int index) const;
  std::string* _internal_add_col_name();
  public:

  // repeated .CCGraphRPC.RetRow table = 3;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  ::CCGraphRPC::RetRow* mutable_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCGraphRPC::RetRow >*
      mutable_table();
  private:
  const ::CCGraphRPC::RetRow& _internal_table(int index) const;
  ::CCGraphRPC::RetRow* _internal_add_table();
  public:
  const ::CCGraphRPC::RetRow& table(int index) const;
  ::CCGraphRPC::RetRow* add_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCGraphRPC::RetRow >&
      table() const;

  // repeated uint64 measure = 4;
  int measure_size() const;
  private:
  int _internal_measure_size() const;
  public:
  void clear_measure();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_measure(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_measure() const;
  void _internal_add_measure(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_measure();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 measure(int index) const;
  void set_measure(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_measure(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      measure() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_measure();

  // .CCGraphRPC.Code code = 1;
  void clear_code();
  ::CCGraphRPC::Code code() const;
  void set_code(::CCGraphRPC::Code value);
  private:
  ::CCGraphRPC::Code _internal_code() const;
  void _internal_set_code(::CCGraphRPC::Code value);
  public:

  // @@protoc_insertion_point(class_scope:CCGraphRPC.Results)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> col_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCGraphRPC::RetRow > table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > measure_;
  mutable std::atomic<int> _measure_cached_byte_size_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ccgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartParam

// -------------------------------------------------------------------

// CommandParam

// bytes command = 1;
inline void CommandParam::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CommandParam::command() const {
  // @@protoc_insertion_point(field_get:CCGraphRPC.CommandParam.command)
  return _internal_command();
}
inline void CommandParam::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:CCGraphRPC.CommandParam.command)
}
inline std::string* CommandParam::mutable_command() {
  // @@protoc_insertion_point(field_mutable:CCGraphRPC.CommandParam.command)
  return _internal_mutable_command();
}
inline const std::string& CommandParam::_internal_command() const {
  return command_.Get();
}
inline void CommandParam::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommandParam::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCGraphRPC.CommandParam.command)
}
inline void CommandParam::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CCGraphRPC.CommandParam.command)
}
inline void CommandParam::set_command(const void* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCGraphRPC.CommandParam.command)
}
inline std::string* CommandParam::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommandParam::release_command() {
  // @@protoc_insertion_point(field_release:CCGraphRPC.CommandParam.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandParam::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCGraphRPC.CommandParam.command)
}
inline std::string* CommandParam::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CCGraphRPC.CommandParam.command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CommandParam::unsafe_arena_set_allocated_command(
    std::string* command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command != nullptr) {
    
  } else {
    
  }
  command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCGraphRPC.CommandParam.command)
}

// -------------------------------------------------------------------

// CallParam

// bytes txn_name = 1;
inline void CallParam::clear_txn_name() {
  txn_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CallParam::txn_name() const {
  // @@protoc_insertion_point(field_get:CCGraphRPC.CallParam.txn_name)
  return _internal_txn_name();
}
inline void CallParam::set_txn_name(const std::string& value) {
  _internal_set_txn_name(value);
  // @@protoc_insertion_point(field_set:CCGraphRPC.CallParam.txn_name)
}
inline std::string* CallParam::mutable_txn_name() {
  // @@protoc_insertion_point(field_mutable:CCGraphRPC.CallParam.txn_name)
  return _internal_mutable_txn_name();
}
inline const std::string& CallParam::_internal_txn_name() const {
  return txn_name_.Get();
}
inline void CallParam::_internal_set_txn_name(const std::string& value) {
  
  txn_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CallParam::set_txn_name(std::string&& value) {
  
  txn_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCGraphRPC.CallParam.txn_name)
}
inline void CallParam::set_txn_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txn_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:CCGraphRPC.CallParam.txn_name)
}
inline void CallParam::set_txn_name(const void* value,
    size_t size) {
  
  txn_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCGraphRPC.CallParam.txn_name)
}
inline std::string* CallParam::_internal_mutable_txn_name() {
  
  return txn_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CallParam::release_txn_name() {
  // @@protoc_insertion_point(field_release:CCGraphRPC.CallParam.txn_name)
  return txn_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CallParam::set_allocated_txn_name(std::string* txn_name) {
  if (txn_name != nullptr) {
    
  } else {
    
  }
  txn_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txn_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCGraphRPC.CallParam.txn_name)
}
inline std::string* CallParam::unsafe_arena_release_txn_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CCGraphRPC.CallParam.txn_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return txn_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CallParam::unsafe_arena_set_allocated_txn_name(
    std::string* txn_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (txn_name != nullptr) {
    
  } else {
    
  }
  txn_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      txn_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCGraphRPC.CallParam.txn_name)
}

// repeated bytes param_list = 2;
inline int CallParam::_internal_param_list_size() const {
  return param_list_.size();
}
inline int CallParam::param_list_size() const {
  return _internal_param_list_size();
}
inline void CallParam::clear_param_list() {
  param_list_.Clear();
}
inline std::string* CallParam::add_param_list() {
  // @@protoc_insertion_point(field_add_mutable:CCGraphRPC.CallParam.param_list)
  return _internal_add_param_list();
}
inline const std::string& CallParam::_internal_param_list(int index) const {
  return param_list_.Get(index);
}
inline const std::string& CallParam::param_list(int index) const {
  // @@protoc_insertion_point(field_get:CCGraphRPC.CallParam.param_list)
  return _internal_param_list(index);
}
inline std::string* CallParam::mutable_param_list(int index) {
  // @@protoc_insertion_point(field_mutable:CCGraphRPC.CallParam.param_list)
  return param_list_.Mutable(index);
}
inline void CallParam::set_param_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CCGraphRPC.CallParam.param_list)
  param_list_.Mutable(index)->assign(value);
}
inline void CallParam::set_param_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CCGraphRPC.CallParam.param_list)
  param_list_.Mutable(index)->assign(std::move(value));
}
inline void CallParam::set_param_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCGraphRPC.CallParam.param_list)
}
inline void CallParam::set_param_list(int index, const void* value, size_t size) {
  param_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCGraphRPC.CallParam.param_list)
}
inline std::string* CallParam::_internal_add_param_list() {
  return param_list_.Add();
}
inline void CallParam::add_param_list(const std::string& value) {
  param_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCGraphRPC.CallParam.param_list)
}
inline void CallParam::add_param_list(std::string&& value) {
  param_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCGraphRPC.CallParam.param_list)
}
inline void CallParam::add_param_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCGraphRPC.CallParam.param_list)
}
inline void CallParam::add_param_list(const void* value, size_t size) {
  param_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCGraphRPC.CallParam.param_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CallParam::param_list() const {
  // @@protoc_insertion_point(field_list:CCGraphRPC.CallParam.param_list)
  return param_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CallParam::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:CCGraphRPC.CallParam.param_list)
  return &param_list_;
}

// bool retry = 3;
inline void CallParam::clear_retry() {
  retry_ = false;
}
inline bool CallParam::_internal_retry() const {
  return retry_;
}
inline bool CallParam::retry() const {
  // @@protoc_insertion_point(field_get:CCGraphRPC.CallParam.retry)
  return _internal_retry();
}
inline void CallParam::_internal_set_retry(bool value) {
  
  retry_ = value;
}
inline void CallParam::set_retry(bool value) {
  _internal_set_retry(value);
  // @@protoc_insertion_point(field_set:CCGraphRPC.CallParam.retry)
}

// -------------------------------------------------------------------

// RetRow

// repeated bytes one_row = 1;
inline int RetRow::_internal_one_row_size() const {
  return one_row_.size();
}
inline int RetRow::one_row_size() const {
  return _internal_one_row_size();
}
inline void RetRow::clear_one_row() {
  one_row_.Clear();
}
inline std::string* RetRow::add_one_row() {
  // @@protoc_insertion_point(field_add_mutable:CCGraphRPC.RetRow.one_row)
  return _internal_add_one_row();
}
inline const std::string& RetRow::_internal_one_row(int index) const {
  return one_row_.Get(index);
}
inline const std::string& RetRow::one_row(int index) const {
  // @@protoc_insertion_point(field_get:CCGraphRPC.RetRow.one_row)
  return _internal_one_row(index);
}
inline std::string* RetRow::mutable_one_row(int index) {
  // @@protoc_insertion_point(field_mutable:CCGraphRPC.RetRow.one_row)
  return one_row_.Mutable(index);
}
inline void RetRow::set_one_row(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CCGraphRPC.RetRow.one_row)
  one_row_.Mutable(index)->assign(value);
}
inline void RetRow::set_one_row(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CCGraphRPC.RetRow.one_row)
  one_row_.Mutable(index)->assign(std::move(value));
}
inline void RetRow::set_one_row(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  one_row_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCGraphRPC.RetRow.one_row)
}
inline void RetRow::set_one_row(int index, const void* value, size_t size) {
  one_row_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCGraphRPC.RetRow.one_row)
}
inline std::string* RetRow::_internal_add_one_row() {
  return one_row_.Add();
}
inline void RetRow::add_one_row(const std::string& value) {
  one_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCGraphRPC.RetRow.one_row)
}
inline void RetRow::add_one_row(std::string&& value) {
  one_row_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCGraphRPC.RetRow.one_row)
}
inline void RetRow::add_one_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  one_row_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCGraphRPC.RetRow.one_row)
}
inline void RetRow::add_one_row(const void* value, size_t size) {
  one_row_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCGraphRPC.RetRow.one_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RetRow::one_row() const {
  // @@protoc_insertion_point(field_list:CCGraphRPC.RetRow.one_row)
  return one_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RetRow::mutable_one_row() {
  // @@protoc_insertion_point(field_mutable_list:CCGraphRPC.RetRow.one_row)
  return &one_row_;
}

// -------------------------------------------------------------------

// Results

// .CCGraphRPC.Code code = 1;
inline void Results::clear_code() {
  code_ = 0;
}
inline ::CCGraphRPC::Code Results::_internal_code() const {
  return static_cast< ::CCGraphRPC::Code >(code_);
}
inline ::CCGraphRPC::Code Results::code() const {
  // @@protoc_insertion_point(field_get:CCGraphRPC.Results.code)
  return _internal_code();
}
inline void Results::_internal_set_code(::CCGraphRPC::Code value) {
  
  code_ = value;
}
inline void Results::set_code(::CCGraphRPC::Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:CCGraphRPC.Results.code)
}

// repeated bytes col_name = 2;
inline int Results::_internal_col_name_size() const {
  return col_name_.size();
}
inline int Results::col_name_size() const {
  return _internal_col_name_size();
}
inline void Results::clear_col_name() {
  col_name_.Clear();
}
inline std::string* Results::add_col_name() {
  // @@protoc_insertion_point(field_add_mutable:CCGraphRPC.Results.col_name)
  return _internal_add_col_name();
}
inline const std::string& Results::_internal_col_name(int index) const {
  return col_name_.Get(index);
}
inline const std::string& Results::col_name(int index) const {
  // @@protoc_insertion_point(field_get:CCGraphRPC.Results.col_name)
  return _internal_col_name(index);
}
inline std::string* Results::mutable_col_name(int index) {
  // @@protoc_insertion_point(field_mutable:CCGraphRPC.Results.col_name)
  return col_name_.Mutable(index);
}
inline void Results::set_col_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CCGraphRPC.Results.col_name)
  col_name_.Mutable(index)->assign(value);
}
inline void Results::set_col_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CCGraphRPC.Results.col_name)
  col_name_.Mutable(index)->assign(std::move(value));
}
inline void Results::set_col_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  col_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCGraphRPC.Results.col_name)
}
inline void Results::set_col_name(int index, const void* value, size_t size) {
  col_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCGraphRPC.Results.col_name)
}
inline std::string* Results::_internal_add_col_name() {
  return col_name_.Add();
}
inline void Results::add_col_name(const std::string& value) {
  col_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCGraphRPC.Results.col_name)
}
inline void Results::add_col_name(std::string&& value) {
  col_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCGraphRPC.Results.col_name)
}
inline void Results::add_col_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  col_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCGraphRPC.Results.col_name)
}
inline void Results::add_col_name(const void* value, size_t size) {
  col_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCGraphRPC.Results.col_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Results::col_name() const {
  // @@protoc_insertion_point(field_list:CCGraphRPC.Results.col_name)
  return col_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Results::mutable_col_name() {
  // @@protoc_insertion_point(field_mutable_list:CCGraphRPC.Results.col_name)
  return &col_name_;
}

// repeated .CCGraphRPC.RetRow table = 3;
inline int Results::_internal_table_size() const {
  return table_.size();
}
inline int Results::table_size() const {
  return _internal_table_size();
}
inline void Results::clear_table() {
  table_.Clear();
}
inline ::CCGraphRPC::RetRow* Results::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:CCGraphRPC.Results.table)
  return table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCGraphRPC::RetRow >*
Results::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:CCGraphRPC.Results.table)
  return &table_;
}
inline const ::CCGraphRPC::RetRow& Results::_internal_table(int index) const {
  return table_.Get(index);
}
inline const ::CCGraphRPC::RetRow& Results::table(int index) const {
  // @@protoc_insertion_point(field_get:CCGraphRPC.Results.table)
  return _internal_table(index);
}
inline ::CCGraphRPC::RetRow* Results::_internal_add_table() {
  return table_.Add();
}
inline ::CCGraphRPC::RetRow* Results::add_table() {
  // @@protoc_insertion_point(field_add:CCGraphRPC.Results.table)
  return _internal_add_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCGraphRPC::RetRow >&
Results::table() const {
  // @@protoc_insertion_point(field_list:CCGraphRPC.Results.table)
  return table_;
}

// repeated uint64 measure = 4;
inline int Results::_internal_measure_size() const {
  return measure_.size();
}
inline int Results::measure_size() const {
  return _internal_measure_size();
}
inline void Results::clear_measure() {
  measure_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Results::_internal_measure(int index) const {
  return measure_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Results::measure(int index) const {
  // @@protoc_insertion_point(field_get:CCGraphRPC.Results.measure)
  return _internal_measure(index);
}
inline void Results::set_measure(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  measure_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCGraphRPC.Results.measure)
}
inline void Results::_internal_add_measure(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  measure_.Add(value);
}
inline void Results::add_measure(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_measure(value);
  // @@protoc_insertion_point(field_add:CCGraphRPC.Results.measure)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Results::_internal_measure() const {
  return measure_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Results::measure() const {
  // @@protoc_insertion_point(field_list:CCGraphRPC.Results.measure)
  return _internal_measure();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Results::_internal_mutable_measure() {
  return &measure_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Results::mutable_measure() {
  // @@protoc_insertion_point(field_mutable_list:CCGraphRPC.Results.measure)
  return _internal_mutable_measure();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CCGraphRPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CCGraphRPC::Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CCGraphRPC::Code>() {
  return ::CCGraphRPC::Code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ccgraph_2eproto
