// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ccgraph.proto
#ifndef GRPC_ccgraph_2eproto__INCLUDED
#define GRPC_ccgraph_2eproto__INCLUDED

#include "ccgraph.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace CCGraphRPC {

// message TxnID {
//   uint64 txnid = 1;
// }
//
// message TxnIDParam {
//   uint64 txnid = 1;
//   bool reuse = 2;
// }
class CCGraphServer final {
 public:
  static constexpr char const* service_full_name() {
    return "CCGraphRPC.CCGraphServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::CCGraphRPC::StartParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::StartParam>> AsyncShutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::StartParam>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::StartParam>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::StartParam>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::CCGraphRPC::Results* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>> AsyncRunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>>(AsyncRunTxnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>> PrepareAsyncRunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>>(PrepareAsyncRunTxnRaw(context, request, cq));
    }
    virtual ::grpc::Status Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::CCGraphRPC::Results* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>> AsyncCommand(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>>(AsyncCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>> PrepareAsyncCommand(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>>(PrepareAsyncCommandRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::StartParam* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::StartParam* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::StartParam* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunTxn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RunTxn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RunTxn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Command(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Command(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Command(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::StartParam>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::StartParam>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>* AsyncRunTxnRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>* PrepareAsyncRunTxnRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>* AsyncCommandRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CCGraphRPC::Results>* PrepareAsyncCommandRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::CCGraphRPC::StartParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::StartParam>> AsyncShutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::StartParam>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::StartParam>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::StartParam>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::CCGraphRPC::Results* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>> AsyncRunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>>(AsyncRunTxnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>> PrepareAsyncRunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>>(PrepareAsyncRunTxnRaw(context, request, cq));
    }
    ::grpc::Status Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::CCGraphRPC::Results* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>> AsyncCommand(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>>(AsyncCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>> PrepareAsyncCommand(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>>(PrepareAsyncCommandRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response, std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::StartParam* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::StartParam* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::StartParam* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)>) override;
      void RunTxn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RunTxn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RunTxn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)>) override;
      void Command(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Command(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Command(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::StartParam>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::StartParam>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>* AsyncRunTxnRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>* PrepareAsyncRunTxnRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>* AsyncCommandRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>* PrepareAsyncCommandRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::internal::RpcMethod rpcmethod_RunTxn_;
    const ::grpc::internal::RpcMethod rpcmethod_Command_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response);
    virtual ::grpc::Status RunTxn(::grpc::ServerContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response);
    virtual ::grpc::Status Command(::grpc::ServerContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::StartParam* /*request*/, ::CCGraphRPC::StartParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::CCGraphRPC::StartParam* request, ::grpc::ServerAsyncResponseWriter< ::CCGraphRPC::StartParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunTxn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunTxn() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RunTxn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTxn(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CallParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTxn(::grpc::ServerContext* context, ::CCGraphRPC::CallParam* request, ::grpc::ServerAsyncResponseWriter< ::CCGraphRPC::Results>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Command() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CommandParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommand(::grpc::ServerContext* context, ::CCGraphRPC::CommandParam* request, ::grpc::ServerAsyncResponseWriter< ::CCGraphRPC::Results>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Shutdown<WithAsyncMethod_RunTxn<WithAsyncMethod_Command<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Shutdown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::CCGraphRPC::StartParam, ::CCGraphRPC::StartParam>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response) { return this->Shutdown(context, request, response); }));}
    void SetMessageAllocatorFor_Shutdown(
        ::grpc::experimental::MessageAllocator< ::CCGraphRPC::StartParam, ::CCGraphRPC::StartParam>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::CCGraphRPC::StartParam, ::CCGraphRPC::StartParam>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::StartParam* /*request*/, ::CCGraphRPC::StartParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::CCGraphRPC::StartParam* /*request*/, ::CCGraphRPC::StartParam* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Shutdown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CCGraphRPC::StartParam* /*request*/, ::CCGraphRPC::StartParam* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RunTxn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RunTxn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::CCGraphRPC::CallParam, ::CCGraphRPC::Results>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response) { return this->RunTxn(context, request, response); }));}
    void SetMessageAllocatorFor_RunTxn(
        ::grpc::experimental::MessageAllocator< ::CCGraphRPC::CallParam, ::CCGraphRPC::Results>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::CCGraphRPC::CallParam, ::CCGraphRPC::Results>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RunTxn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTxn(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CallParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunTxn(
      ::grpc::CallbackServerContext* /*context*/, const ::CCGraphRPC::CallParam* /*request*/, ::CCGraphRPC::Results* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunTxn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CCGraphRPC::CallParam* /*request*/, ::CCGraphRPC::Results* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Command() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::CCGraphRPC::CommandParam, ::CCGraphRPC::Results>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response) { return this->Command(context, request, response); }));}
    void SetMessageAllocatorFor_Command(
        ::grpc::experimental::MessageAllocator< ::CCGraphRPC::CommandParam, ::CCGraphRPC::Results>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::CCGraphRPC::CommandParam, ::CCGraphRPC::Results>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CommandParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Command(
      ::grpc::CallbackServerContext* /*context*/, const ::CCGraphRPC::CommandParam* /*request*/, ::CCGraphRPC::Results* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Command(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::CCGraphRPC::CommandParam* /*request*/, ::CCGraphRPC::Results* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Shutdown<ExperimentalWithCallbackMethod_RunTxn<ExperimentalWithCallbackMethod_Command<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Shutdown<ExperimentalWithCallbackMethod_RunTxn<ExperimentalWithCallbackMethod_Command<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::StartParam* /*request*/, ::CCGraphRPC::StartParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunTxn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunTxn() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RunTxn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTxn(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CallParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Command() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CommandParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Shutdown() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::StartParam* /*request*/, ::CCGraphRPC::StartParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunTxn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunTxn() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RunTxn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTxn(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CallParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunTxn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Command() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CommandParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Shutdown() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Shutdown(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::StartParam* /*request*/, ::CCGraphRPC::StartParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Shutdown(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Shutdown(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RunTxn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RunTxn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunTxn(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RunTxn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunTxn(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CallParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RunTxn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RunTxn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Command() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Command(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CommandParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Command(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Command(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CCGraphRPC::StartParam, ::CCGraphRPC::StartParam>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::CCGraphRPC::StartParam, ::CCGraphRPC::StartParam>* streamer) {
                       return this->StreamedShutdown(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::StartParam* /*request*/, ::CCGraphRPC::StartParam* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CCGraphRPC::StartParam,::CCGraphRPC::StartParam>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunTxn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunTxn() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CCGraphRPC::CallParam, ::CCGraphRPC::Results>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::CCGraphRPC::CallParam, ::CCGraphRPC::Results>* streamer) {
                       return this->StreamedRunTxn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunTxn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunTxn(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CallParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunTxn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CCGraphRPC::CallParam,::CCGraphRPC::Results>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Command() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CCGraphRPC::CommandParam, ::CCGraphRPC::Results>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::CCGraphRPC::CommandParam, ::CCGraphRPC::Results>* streamer) {
                       return this->StreamedCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::CCGraphRPC::CommandParam* /*request*/, ::CCGraphRPC::Results* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CCGraphRPC::CommandParam,::CCGraphRPC::Results>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_RunTxn<WithStreamedUnaryMethod_Command<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_RunTxn<WithStreamedUnaryMethod_Command<Service > > > StreamedService;
};
// todo: maybe we need interactive?
// rpc Start(StartParam) returns (TxnID) {}
// rpc Commit(TxnIDParam) returns (CodeRet) {} 
// rpc Abort(TxnIDParam) returns (CodeRet) {}

}  // namespace CCGraphRPC


#endif  // GRPC_ccgraph_2eproto__INCLUDED
