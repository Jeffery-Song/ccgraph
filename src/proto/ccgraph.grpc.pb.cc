// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ccgraph.proto

#include "ccgraph.pb.h"
#include "ccgraph.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace CCGraphRPC {

static const char* CCGraphServer_method_names[] = {
  "/CCGraphRPC.CCGraphServer/Shutdown",
  "/CCGraphRPC.CCGraphServer/RunTxn",
  "/CCGraphRPC.CCGraphServer/Command",
};

std::unique_ptr< CCGraphServer::Stub> CCGraphServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CCGraphServer::Stub> stub(new CCGraphServer::Stub(channel));
  return stub;
}

CCGraphServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Shutdown_(CCGraphServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunTxn_(CCGraphServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Command_(CCGraphServer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CCGraphServer::Stub::Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::CCGraphRPC::StartParam* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void CCGraphServer::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void CCGraphServer::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::StartParam* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void CCGraphServer::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

void CCGraphServer::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::StartParam* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CCGraphRPC::StartParam>* CCGraphServer::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CCGraphRPC::StartParam>::Create(channel_.get(), cq, rpcmethod_Shutdown_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CCGraphRPC::StartParam>* CCGraphServer::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::CCGraphRPC::StartParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CCGraphRPC::StartParam>::Create(channel_.get(), cq, rpcmethod_Shutdown_, context, request, false);
}

::grpc::Status CCGraphServer::Stub::RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::CCGraphRPC::Results* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RunTxn_, context, request, response);
}

void CCGraphServer::Stub::experimental_async::RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunTxn_, context, request, response, std::move(f));
}

void CCGraphServer::Stub::experimental_async::RunTxn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RunTxn_, context, request, response, std::move(f));
}

void CCGraphServer::Stub::experimental_async::RunTxn(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RunTxn_, context, request, response, reactor);
}

void CCGraphServer::Stub::experimental_async::RunTxn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RunTxn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>* CCGraphServer::Stub::AsyncRunTxnRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CCGraphRPC::Results>::Create(channel_.get(), cq, rpcmethod_RunTxn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>* CCGraphServer::Stub::PrepareAsyncRunTxnRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CallParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CCGraphRPC::Results>::Create(channel_.get(), cq, rpcmethod_RunTxn_, context, request, false);
}

::grpc::Status CCGraphServer::Stub::Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::CCGraphRPC::Results* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Command_, context, request, response);
}

void CCGraphServer::Stub::experimental_async::Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, std::move(f));
}

void CCGraphServer::Stub::experimental_async::Command(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, std::move(f));
}

void CCGraphServer::Stub::experimental_async::Command(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, reactor);
}

void CCGraphServer::Stub::experimental_async::Command(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CCGraphRPC::Results* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>* CCGraphServer::Stub::AsyncCommandRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CCGraphRPC::Results>::Create(channel_.get(), cq, rpcmethod_Command_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CCGraphRPC::Results>* CCGraphServer::Stub::PrepareAsyncCommandRaw(::grpc::ClientContext* context, const ::CCGraphRPC::CommandParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CCGraphRPC::Results>::Create(channel_.get(), cq, rpcmethod_Command_, context, request, false);
}

CCGraphServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCGraphServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCGraphServer::Service, ::CCGraphRPC::StartParam, ::CCGraphRPC::StartParam>(
          [](CCGraphServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::CCGraphRPC::StartParam* req,
             ::CCGraphRPC::StartParam* resp) {
               return service->Shutdown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCGraphServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCGraphServer::Service, ::CCGraphRPC::CallParam, ::CCGraphRPC::Results>(
          [](CCGraphServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::CCGraphRPC::CallParam* req,
             ::CCGraphRPC::Results* resp) {
               return service->RunTxn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CCGraphServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CCGraphServer::Service, ::CCGraphRPC::CommandParam, ::CCGraphRPC::Results>(
          [](CCGraphServer::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::CCGraphRPC::CommandParam* req,
             ::CCGraphRPC::Results* resp) {
               return service->Command(ctx, req, resp);
             }, this)));
}

CCGraphServer::Service::~Service() {
}

::grpc::Status CCGraphServer::Service::Shutdown(::grpc::ServerContext* context, const ::CCGraphRPC::StartParam* request, ::CCGraphRPC::StartParam* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CCGraphServer::Service::RunTxn(::grpc::ServerContext* context, const ::CCGraphRPC::CallParam* request, ::CCGraphRPC::Results* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CCGraphServer::Service::Command(::grpc::ServerContext* context, const ::CCGraphRPC::CommandParam* request, ::CCGraphRPC::Results* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CCGraphRPC

